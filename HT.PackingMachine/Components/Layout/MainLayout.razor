@using Blazored.LocalStorage
@using HoangThach.AccountShared.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inherits LayoutComponentBase
@inject IAuthService AuthService

@inject NavigationManager NavigationManager

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.ExtraSmall"
                   CloseButton="false"
                   BackdropClick="true"
                   NoHeader="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Error" OnClick="@DarkModeToggle" />
        <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Size="@Size.Large" Dense="true" AnchorOrigin="Origin.BottomRight"
                 Color="@Color.Primary">

            <AuthorizeView>
                <Authorized>
                    <MudMenuItem>
                        <MudText Align="Align.Center" Style="font-variant:small-caps; font-weight:bold">@UserName</MudText>
                    </MudMenuItem>
                    <MudDivider />
                    <MudMenuItem Href="https://account.hoangthach.vn" Icon="@Icons.Material.Filled.ManageAccounts">Mật khẩu</MudMenuItem>

                    <MudMenuItem Href="Logout" Icon="@Icons.Material.Filled.Logout"> Đăng xuất</MudMenuItem>
                </Authorized>
                <NotAuthorized>
                    <MudMenuItem Href="Login" Icon="@Icons.Material.Filled.Login"> Đăng nhập </MudMenuItem>
                </NotAuthorized>
            </AuthorizeView>

        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudLink Href="https://account.hoangthach.vn">
                <MudImage Src="images/logohoangthach.png" Fluid="true"></MudImage>
            </MudLink>

        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pa-4 pt-20">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {



    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;

    private string UserName = "";

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    [Inject] private ILocalStorageService _localStorage { get; set; }
    [Inject] private AuthenticationService authenticationService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };



    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            //var token = await AuthService.CheckTokenAndRefresh(NavigationManager.BaseUri);
            string token = await _localStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                await authenticationService.MarkUserAsAuthenticated(token, null);
                var authState = await AuthenticationState;
                var user = authState.User;
                UserName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            }


            StateHasChanged();

        }

    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


